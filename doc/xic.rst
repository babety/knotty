***********************************
  XIC 协议消息格式  /ksik/
***********************************
:Author: 熊家贵
:Contact: xiongjg@tsinghua.org.cn

.. sectnum::

XIC消息类型
============

XIC 共有5种消息类型::

        Quest   (From client to server)
        Answer  (From server to client)
        Hello   (From server to client)
        Bye     (client to server, or server to client)
        Check   (S=>C or C=>S)

XIC消息 由 header 和 body 组成。
消息Header为固定长度（8字节）。
Hello消息和 Bye消息只有 header, 没有 body。 
其他三种消息的body有不同的数据项，但其中的所有数据都采用VBS编码。


消息头部
==========

Header 为8个字节的固定长度, 包含以下数据项::

        byte    magic;                  // 'X'
        byte    version;                // '!'
        byte    msgType;                // 'Q', 'A', 'H', 'B', 'C'
        byte    flags;                  // 0x00 or 0x01
        int32_t bodySize;               // big endian byte order

各数据项含义如下:

==========  =================================================================
数据项       含义
==========  =================================================================
magic        为 'X' 的ASCII码，即 0x58
version      消息版本号，目前是 '!', 即 0x21
flags        总是 0x00 或者 0x01 (加密)
bodySize     消息体的长度，为4字节的整数，其在网络上按大端字节序传输,
             也就是通常的网络字节序。其合法取值范围为0--2G(2147483647),
             但实际引用中，其取值范围会小很多，比如0--64M。
msgType      表示消息类型，其取值如下表所示 
==========  =================================================================


.. table:: msgType 含义

        ===========  ===========================
          msgType      含义
        ===========  ===========================
           'Q'         Quest
           'A'         Answer 
           'C'         Check
           'H'         Hello
           'B'         Bye
        ===========  ===========================

如果 (flags & 0x01) 为真，则表示消息体是加密后的内容。消息体的格式变为::

        16字节IV (8字节随机数+8字节序列号，客户端和服务器端的序列号的取值空间不重合)
        正常消息体(加密后)
        16字节MAC

只有 'Q', 'A' 两种类型的消息体才可能会被加密。


Check消息体
=============

Check消息Body包含以下数据项::

        string  command;
        dict    args;

各数据项含义如下:

========  ===================================================================
数据项     含义
========  ===================================================================
command    命令名，ASCII字符串
args       参数，字典中key为ASCII字符串，value可以是VBS中定义的任意类型数据
========  ===================================================================

Check消息是服务器用来验证客户端的。服务器端收到一个新的连接时，根据配置
可能会在发送Hello消息前向客户端发送Check消息。

目前Check消息用到的command包括::
        FORBIDDEN               # S=>C 
        AUTHENTICATE            # S=>C
        SRP6a1                  # C=>S
        SRP6a2                  # S=>C
        SRP6a3                  # C=>S
        SRP6a4                  # S=>C


Quest消息体
=============

Quest消息Body包含以下数据项::

        integer txid;
        string  service;
        string  method;
        dict    context;
        dict    args;

各数据项含义如下:

========  ===================================================================
数据项     含义
========  ===================================================================
txid       请求id, 整数，不大于64bits的整数
service    服务名，ASCII字符串
method     方法名，ASCII字符串
context    上下文，类似于环境变量的作用，字典中key为ASCII字符串, value只能
           是VBS中定义的基本类型数据
args       参数，字典中key为ASCII字符串，value可以是VBS中定义的任意类型数据
========  ===================================================================

其中，如果txid为0，则表示该请求为单向请求，不需要回复Answer。
txid可以由客户端设为任意值，只要客户端能区分多个还未收到回复的请求即可，
服务器端只是简单的把Quest的txid原样返回在Answer的txid中。


Answer消息体
==============

Answer消息Body包含以下数据项::

        integer txid;
        integer status;
        dict    args;

各数据项含义如下:

=======  ====================================================================
数据项    含义
=======  ====================================================================
txid      请求id, 必须与相应的Quest中的txid一致
status    状态, 0 表示正常，非0表示异常
args      参数，字典中key为ASCII字符串，value可以是VBS中定义的任意类型数据
=======  ====================================================================

其中，当status为0（正常）时，args字典的数据由应用自行定义；
当status为非0（异常）时，args字典的数据应该包括以下几项

.. table:: 异常Answer的参数

        ==========  ============  ===========================================
        Key名         Value类型     说明
        ==========  ============  ===========================================
        exname        %s            异常名称
        code          %i            错误码
        tag           %s            错误标签(和错误码用处相似，只不过是简短ASCII字符串)
        message       %s            错误消息
        raiser        %s            产生错误的XIC服务名，方法名，网络地址等。
                                    格式为 method*service @proto+host+port
        detail        {%s^%x}       详细信息，由各实现自行定义
        ==========  ============  ===========================================

在Quest和Answer消息中，参数args中的value，可能会用到VBS编码的特殊
描述符功能。 在XIC-RPC框架中，如果某项数据有附加的特殊描述符，那么
XIC-RPC框架的日志系统将只会记录该项数据的类型，不会记录该项数据的值，
这样，某些敏感的信息就不会因为XIC-RPC框架的日志而泄漏。
应用程序本身也应该注意不要将这类敏感信息记录到自己的日志系统中，
但这已经超出了XIC-RPC框架所能控制的范围。


Hello消息
===========

服务器端收到一个新的连接时，首先发送一个Hello消息给客户端。
Hello消息表示服务器现在处于正常服务状态。
客户端只有收到Hello消息之后，才能开始发送Quest请求。


Bye消息
===========

服务器端和客户端任意一方想要(优雅地)关闭连接，都必须发送Bye消息给对方。
对方收到Bye消息后，关闭连接(socket)。
发起方探测到连接断开后，关闭连接(socket)。

如果客户端想要(优雅)关闭某个连接，它应该等到所有请求都返回结果之后才能进行。

如果服务器端想要(优雅)关闭某个连接，它应该抛弃该连接上新收到的所有请求，
并且等所有正在处理的请求都返回结果之后才能进行。

